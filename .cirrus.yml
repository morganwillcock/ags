build_windows_task:
  windows_container:
    dockerfile: ci/windows/Dockerfile
    os_version: 2019
  env:
    matrix:
      - BUILD_CONFIG: Release
      - BUILD_CONFIG: Debug
    ALLEGRO_RELEASE: v4.4.3-ags-2
    AGS_DIRECTX_LIB: C:\Lib\DirectX
    AGS_LIBOGG_LIB: C:\Lib\Xiph
    AGS_LIBTHEORA_LIB: C:\Lib\Xiph
    AGS_LIBVORBIS_LIB: C:\Lib\Xiph
  build_script: >
    "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86 &&
    set "AGS_ALLEGRO_INCLUDE=C:\Source\Allegro\%ALLEGRO_RELEASE%\include;C:\Source\Allegro\%ALLEGRO_RELEASE%\build\VS2015\include" &&
    set "AGS_ALLEGRO_LIB=C:\Lib\Allegro\%ALLEGRO_RELEASE%" &&
    cd Solutions &&
    msbuild Engine.sln /p:PlatformToolset=v140 /p:Configuration=%BUILD_CONFIG% /p:Platform=Win32 /maxcpucount /nologo
  binaries_artifacts:
    path: Solutions/.build/*/*

build_linux_task:
  container:
    dockerfile: ci/linux/Dockerfile
    docker_arguments:
      matrix:
        - FROM_DEBIAN: debian:jessie
        - FROM_DEBIAN: i386/debian:jessie
  env:
    matrix:
      - BUILD_SYSTEM: cmake
        BUILD_TYPE: release
      - BUILD_SYSTEM: cmake
        BUILD_TYPE: debug
      - BUILD_SYSTEM: debian
      - BUILD_SYSTEM: make
  build_script: |
    arch=$(dpkg --print-architecture)
    case $BUILD_SYSTEM in
      cmake)
        filename=${BUILD_TYPE}_$arch
        mkdir build_$filename && cd build_$filename
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE .. && make
        ;;
      debian)
        version=$(awk -F"[ \"]+" '{ if ($1=="#define" && $2=="ACI_VERSION_STR") { print $3; exit } }' Common/core/def_version.h)
        sed -i -s "s/ags \(.*\)(.*)/ags \($version\)\1/" debian/changelog
        fakeroot debian/rules binary
        mv ../ags*.deb .
        case $arch in
          amd64)
            bit=64
            ;;
          i386)
            bit=32
            ;;
          *)
            echo "Unknown architecture"
            exit 1
            ;;
        esac
        sed -E "/^BI(NDMOUNT|T)=/d" debian/ags+libraries/hooks/B00_copy_libs.sh | BIT=$bit BINDMOUNT=$(pwd) sh
        cd data && tar -cvzf ../data_$arch.tar.gz *
        ;;
      make)
        make --directory=Engine
        mkdir build_$arch && mv Engine/ags build_$arch/
        ;;
      *)
        echo "Invalid build system"
        exit 1
        ;;
    esac
  binaries_artifacts:
    path: build_*/ags
  debian_packages_artifacts:
    path: ags*.deb
  debian_files_artifacts:
    path: data_*.tar.gz

build_macos_task:
  osx_instance:
    matrix:
      - image: mojave-xcode-10.2
      - image: high-sierra-xcode-9.4.1
  env:
    matrix:
      - BUILD_TYPE: debug
      - BUILD_TYPE: release
    CMAKE_VERSION: 3.14.5
  install_cmake_script: |
    url="https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Darwin-x86_64.tar.gz"
    echo "Downloading CMake from $url"
    curl -fLSs "$url" | bsdtar -f - -xvzC /Applications --strip-components 1
  build_script: |
    xcode=$(xcodebuild -version | awk '{ print $2; exit }')
    mkdir build_${xcode}_$BUILD_TYPE && cd build_${xcode}_$BUILD_TYPE
    /Applications/CMake.app/Contents/bin/cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE .. && make
  binaries_artifacts:
    path: build_*/ags

build_editor_task:
  windows_container:
    dockerfile: ci/windows/Dockerfile
    os_version: 2019
  env:
    matrix:
      - BUILD_CONFIG: Release
      - BUILD_CONFIG: Debug
    ALLEGRO_RELEASE: v4.4.3-ags-2
    AGS_DIRECTX_LIB: C:\Lib\DirectX
  nuget_packages_cache:
    folder: Solutions\packages
    fingerprint_script: type Editor\AGS.Editor\packages.config
    populate_script: nuget restore Solutions\AGS.Editor.Full.sln
  build_script: >
    "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86 &&
    set "AGS_ALLEGRO_INCLUDE=C:\Source\Allegro\%ALLEGRO_RELEASE%\include;C:\Source\Allegro\%ALLEGRO_RELEASE%\build\VS2015\include" &&
    set "AGS_ALLEGRO_LIB=C:\Lib\Allegro\%ALLEGRO_RELEASE%" &&
    set "UseEnv=true" &&
    copy C:\Lib\irrKlang\*.dll Editor\References\ &&
    cd Solutions &&
    cmd /v:on /c "set "LIB=C:\Program Files (x86)\Windows Kits\8.0\Lib\Win8\um\x86;!LIB!" &&
    msbuild AGS.Editor.Full.sln /p:PlatformToolset=v140 /p:Configuration=%BUILD_CONFIG% /p:Platform="Mixed Platforms" /maxcpucount /nologo"
  binaries_artifacts:
    path: Solutions/.build/*/*

linux_packaging_task:
  depends_on:
    - build_linux
  freebsd_instance:
    image: freebsd-12-0-release-amd64
  env:
    ALLEGRO_RELEASE: v4.4.3-ags-2
  package_script: |
    tmp=/tmp/bundle$$
    mkdir -p $tmp/data
    echo Getting Debian packages
    url="https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/build_linux/debian_packages.zip"
    curl -fLsS "$url" | tar -f - -xvzC $tmp -s '|.*dbg.*||p'
    for arch in i386 amd64
    do
      echo Extracting engine for $arch
      case $arch in
        amd64)
          bit=64
          ;;
        i386)
          bit=32
          ;;
      esac
      ar -p $tmp/ags*$arch.deb data.tar.xz | unxz | tar -f - -xvC $tmp/data -s "|.*/ags|ags$bit|p" usr/bin/ags
      echo Downloading files for $arch
      url="https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/build_linux/debian_files/data_$arch.tar.gz"
      curl -fLsS "$url" | tar -f - -xvzC $tmp/data
      echo Downloading Allegro $ALLEGRO_RELEASE $arch
      mkdir $tmp/allegro_${ALLEGRO_RELEASE}_$arch
      url="https://github.com/morganwillcock/lib-allegro/releases/download/$ALLEGRO_RELEASE/lib-allegro_release_$arch.tar.gz"
      curl -fLsS "$url" | tar -f - -xvzC $tmp/allegro_${ALLEGRO_RELEASE}_$arch --strip-components 1 -s '|pkgconfig/.*||' lib
      find $tmp/allegro_${ALLEGRO_RELEASE}_$arch \( -name "alleg-*" -or -name "liballeg.so.?.?" \) \
        -exec cp -v "{}" $tmp/data/lib$bit/ \;
      echo alleg-sdl2digi.so >> $tmp/data/lib$bit/modules.lst
    done
    cp -v debian/copyright $tmp/data/licenses/ags-copyright
    cp -v debian/ags+libraries/startgame $tmp/
    awk 'BEGIN { RS="" } !/make_ags/ { if (NR>1) print RS; print }' debian/ags+libraries/README > $tmp/README
    version=$(awk -F"[ \"]+" '{ if ($1=="#define" && $2=="ACI_VERSION_STR") { print $3; exit } }' Common/core/def_version.h)
    tar -f ags_linux_$version.tar.gz -cvzC $tmp data startgame README
  binaries_artifacts:
    path: ags_linux_*.tar.gz
